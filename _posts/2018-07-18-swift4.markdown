---
layout: post
title: "Swift 4 Completion Handler "
date: 2018-07-18 07:02:48 -0400
comments: false
categories: python
---

Create a simple function ...

<pre>
<code class="language-swift">
func f(input: String, completion:  (_ result: String) -> String ) -> String {
  let a = completion("Inside completion \(input)")
  return "Here is a: \(a)"
}
</code>
</pre>

Now call it as follows ...

<pre>
<code class="language-swift">
let r = f(input: "command input ...") {
        (result: String) in
        return ("got back: \(result)")
      }
</code>
</pre>

You'll get the following result:

<pre>
<code class="language-swift">
   Here is a: got back: Inside completion command input ...
</code>
</pre>

<br><br>

## Closures - Escaping

Closures must be escaping when work is done asynchronously or stored.

<pre>
<code class="language-swift">
    func getSumOf(array:[Int], handler: @escaping ((Int)->Void)) {
      
      var sum: Int = 0
      for value in array {
        sum += value
      }
      
      DispatchQueue.main.asyncAfter(deadline: .now() + .seconds(2), execute: {
        handler(sum)
      })
    }
</code>
</pre>

Now calling this function ...

<pre>
<code class="language-swift">
    func doSomething() {
      getSumOf(array: [16,756,442,6,23]) { (sum) in
        print(sum)
      }
    }
    
    doSomething()
    // Output 1243

</code>
</pre>

Here's a way you could test the above function.

```swift

  func testGetSumOf() {
    let expectation = self.expectation(description: "Sum up values")
    getSumOf(array: [16,756,442,6,23]) { (sum) in
      print(sum)
      XCTAssert(sum == 1243, "Sum should equal 1243")
      expectation.fulfill()
    }
    waitForExpectations(timeout: 5, handler: nil)
  }

```

### Extending this example

```swift
func getSumMulOf(array:[Int],
              handler: @escaping (([Int])->Int)) {

  var sum: Int = 0
  var mul: Int = 1
  for value in array {
    sum += value
    mul *= value
  }

  DispatchQueue.main.asyncAfter(deadline: .now() + .seconds(2), execute: {
    print("sum+mul: \(handler([sum,mul]))")
  })
}

```

And now testing this...

```swift
 func testGetSumMulOf() {
    let expectation = self.expectation(description: "Sum up values")
    getSumMulOf(array: [16,756,442,6,23]) { (result) in
      print(result)
      XCTAssert(result[0] == 1243, "Sum should equal 1243")
      XCTAssert(result[1] == 737807616, "Sum should equal 737807616")
      expectation.fulfill()
      return result[0]+result[1]
    }
    waitForExpectations(timeout: 3, handler: nil)
  }
```

<!--  Enter text below, if you want -->
